#!/usr/bin/env sh
# vim:foldmethod=marker:
# shellcheck disable=2016
#
# Copyright (c) 2024 Ben Elan <https://benelan.dev> [MIT License]
#
# A POSIX shell script that wraps fzf around nmcli. There are alternatives that
# use rofi/dmenu instead of fzf, but they were slow/buggy when I tried them.
# Plus this will work on both X11 and Wayland.
#
# https://github.com/firecat53/networkmanager-dmenu
# https://github.com/P3rf/rofi-network-manager
# https://github.com/ericmurphyxyz/rofi-wifi-menu

NM_FZF_VERSION="0.0.0" # x-release-please-version

# utils/config #{{{1
cmd="$(basename "$0")"
has() { command -v "$1" >/dev/null 2>&1; }

help_cmd() {
    cat >&2 <<EOF
An fzf wrapper around Linux's Network Manager CLI (nmcli).

Homepage:        https://github.com/benelan/nm-fzf/

Usage:           $cmd <command>
                 $cmd { wifi | vpn } [<subcommand>]
                 $cmd wifi connect [<SSID>]
                 $cmd vpn import [<user-name>]

Commands:

  c[onnection]   Manage network connections.

  d[evice]       Manage network devices.

  w[ifi]         Manage wifi connections, an optional <subcommand> is accepted:
                   c[onnect]      Select and connect to a wifi network (default)
                   d[isconnect]   Disconnect from the current wifi network(s)
                   t[oggle]       Enable or disable the wifi device

  v[pn]          Manage vpn connections, an optional <subcommand> is accepted:
                   c[onnect]      Select and connect to a vpn network (default)
                   d[isconnect]   Disconnect from the current vpn network(s)
                   i[mport]       Select and import openvpn config file(s)

Environment Variables:

  NM_FZF_APPLET_AUTH
    Determines if nm-applet should be used for authentication. One benefit of
    using nm-applet is passwords aren't required for existing vpn connections.
    By default, nm-applet will be used if it is installed and running. A value
    of \"0\" disables usage, and \"1\" launches nm-applet in the background and
    kills it on exit if it's installed but not running.

  NM_FZF_PASSWD_FILE
    The path to a file that contains a list of connection passwords.
    See: \$ man --pager='less -p "^\s*passwd-file"' nmcli
EOF
    exit 0
}

error() {
    if [ -n "$1" ]; then
        printf "Error: " >&2
        printf "%s\n" "$@" >&2
    fi
    printf "\n%s\n" "See -h for usage info" >&2
    exit 1
}

# vpn users should use nm-applet so existing connections don't need a password
if has nm-applet && [ "$NM_FZF_APPLET_AUTH" != "0" ]; then
    if ! pgrep -x nm-applet >/dev/null 2>&1; then
        if [ "$NM_FZF_APPLET_AUTH" = "1" ]; then
            nohup nm-applet >/dev/null 2>&1 </dev/null &
            trap "pkill nm-applet" EXIT TERM INT
        else
            ask="--ask"
        fi
    fi
else
    ask="--ask"
fi

opts='--colors yes --escape yes'

device_cmd() { #{{{1
    device_actions='(enter: print) (alt-c: connect) (alt-d: disconnect) (alt-X: delete)
(alt-r: reapply) (alt-M: monitor) (ctrl-r: reload list)

'

    FZF_DEFAULT_COMMAND="nmcli $opts device status" \
        fzf --ansi --delimiter='  ' \
        --header-lines=1 --header="$device_actions" \
        --preview='nmcli -p --colors yes device show {1}' \
        --bind='enter:become(echo {1})' \
        --bind='ctrl-r:reload(eval "$FZF_DEFAULT_COMMAND")' \
        --bind='alt-M:execute(nmcli device monitor {1})' \
        --bind='alt-r:execute(nmcli device reapply {1})+refresh-preview' \
        --bind='alt-c:execute(nmcli device connect {1})+reload(
            eval "$FZF_DEFAULT_COMMAND"
        )' \
        --bind='alt-d:execute(nmcli device disconnect {1})+reload(
            eval "$FZF_DEFAULT_COMMAND"
        )' \
        --bind='alt-X:execute(nmcli device delete {1})+reload(
            eval "$FZF_DEFAULT_COMMAND"
        )'
}

connection_cmd() { #{{{1
    conn_fields='NAME,TYPE,DEVICE,UUID'
    conn_actions='(enter: print) (alt-c: connect) (alt-d: disconnect) (alt-X: delete)
(alt-e: edit) (alt-M: monitor) (alt-a: active filter) (alt-r: reload list)

'

    FZF_DEFAULT_COMMAND="nmcli $opts --fields '$conn_fields' connection show" \
        fzf --ansi --delimiter='  ' --header-lines=1 --header="$conn_actions" \
        --preview='nmcli -p --colors yes connection show {-1}' \
        --bind='enter:become(echo {1})' \
        --bind='ctrl-r:reload(eval "$FZF_DEFAULT_COMMAND")' \
        --bind='alt-a:reload(eval "$FZF_DEFAULT_COMMAND --active")' \
        --bind='alt-M:execute(nmcli connection monitor {-1})' \
        --bind='alt-r:execute(nmcli connection reload {-1})+refresh-preview' \
        --bind='alt-e:become(nmcli connection edit {-1})+reload(
            eval "$FZF_DEFAULT_COMMAND"
        )' \
        --bind='alt-c:execute(
                nmcli '"$ask"' connection up {-1} \
                    '${NM_FZF_PASSWD_FILE:+"passwd-file \"$NM_FZF_PASSWD_FILE\""}'
        )+reload(eval "$FZF_DEFAULT_COMMAND")' \
        --bind='alt-d:execute(nmcli connection down {-1})+reload(
            eval "$FZF_DEFAULT_COMMAND"
        )' \
        --bind='alt-X:execute(nmcli connection delete {-1})+reload(
            eval "$FZF_DEFAULT_COMMAND"
        )'
}

vpn_cmd() { #{{{1
    subcommand="connect"
    [ -n "$1" ] && subcommand="$1" && shift

    case "$subcommand" in
        i | im | imp | impo | impor | import) vpn_import "$@" ;;
        c | co | con | conn | conne | connec | connect) vpn_connect "$@" ;;
        d | dis | disc | disco | discon | disconn | disconne | disconnec | \
            disconnect) $0 disconnect vpn ;;
        *) error "invalid vpn subcommand: \"$1\"" ;;
    esac

    unset subcommand
}

vpn_import() { #{{{2
    if has fd; then
        # shellcheck disable=2034
        FZF_DEFAULT_COMMAND="fd -IHt f -e ovpn"
    fi

    # shellcheck disable=2086
    fzf --multi --print0 -q "'.ovpn$ " | xargs --null sh -c '
        for file do
            if nmcli connection import type openvpn file "$file" && [ -n "'$1'" ]; then
                name="$(basename "$file" .ovpn)" &&
                nmcli connection modify "$name" vpn.user-name "'$1'" &&
                printf "Username '\''%s'\'' successfully added to '\''%s'\'' connection.\n\n" "'$1'" "$name" >&2;
            fi;
        done' _
}

vpn_connect() { #{{{2
    if [ -n "$1" ]; then
        nmcli connection up "$1"
        return $?
    fi

    vpn_fields='NAME,TYPE,DEVICE,UUID'
    vpn_actions='(enter: connect) (alt-d: disconnect) (alt-X: delete) (alt-e: edit)
(alt-M: monitor) (alt-a: active filter) (alt-r: reload list)

'
    selected="$(
        # disabled color because the ansi escape codes break the awk filter
        FZF_DEFAULT_COMMAND="nmcli -c no -e yes --fields '$vpn_fields' conn show |
        awk -F'[ ][ ]*' '\$2 == \"vpn\" || NR==1'" \
            fzf --delimiter='  ' --print0 --select-1 --no-multi \
            --header-lines=1 --header="$vpn_actions" \
            --preview='nmcli -p -c yes connection show {-1}' \
            --bind='ctrl-r:reload(eval "$FZF_DEFAULT_COMMAND")' \
            --bind='alt-a:reload(eval "$FZF_DEFAULT_COMMAND --active")' \
            --bind='alt-M:execute(nmcli connection monitor {-1})' \
            --bind='alt-r:execute(nmcli connection reload {-1})+refresh-preview' \
            --bind='alt-e:become(nmcli connection edit {-1})+reload(
            eval "$FZF_DEFAULT_COMMAND"
        )' \
            --bind='alt-d:execute(nmcli connection down {-1})+reload(
            eval "$FZF_DEFAULT_COMMAND"
        )' \
            --bind='alt-X:execute(nmcli connection delete {-1})+reload(
            eval "$FZF_DEFAULT_COMMAND"
        )'
        # --bind='alt-u:execute(
        #     read -rp "Enter user-name for {1} vpn: " name;
        #     [ -n "$name" ] &&
        #     nmcli connection modify {-1} vpn.user-name "$name"
        # )+refresh-preview' \
    )"

    [ -z "$selected" ] && return

    device="$(echo "$selected" | awk -F'[ ][ ]*' '{print $3}')"
    uuid="$(echo "$selected" | awk -F'[ ][ ]*' '{print $4}')"

    if [ "$device" != "--" ]; then
        nmcli connection down "$uuid"
    else
        # give nm-applet time to initialize if it was started by nm-fzf
        [ -z "$ask" ] && [ "$NM_FZF_APPLET_AUTH" = "1" ] && sleep 0.1s

        nmcli $ask connection up "$uuid" \
            ${NM_FZF_PASSWD_FILE:+"passwd-file \"$NM_FZF_PASSWD_FILE\""}
    fi
}

wifi_cmd() { #{{{1
    subcommand="connect"
    [ -n "$1" ] && subcommand="$1" && shift

    case "$subcommand" in
        t | tog | toggl | togg | toggle) wifi_toggle ;;
        c | co | con | conn | conne | connec | connect) wifi_connect "$@" ;;
        d | dis | disc | disco | discon | disconn | disconne | disconnec | \
            disconnect) $cmd disconnect wifi ;;
        *) error "invalid wifi subcommand: \"$1\"" ;;
    esac

    unset subcommand
}

wifi_connect() { #{{{2
    if [ -n "$1" ]; then
        if nmcli --get-values name connection 2>/dev/null | grep -Fxq "$1"; then
            nmcli connection up "$1"
        else
            nmcli $ask device wifi connect "$1"
        fi
        return $?
    fi

    wifi_fields='BSSID,SSID,SECURITY,CHAN,BARS,SIGNAL,RATE,MODE,IN-USE'
    wifi_actions='(enter: connect) (alt-r: rescan) (alt-t: toggle) (alt-d: disconnect) (ctrl-r: reload list)

    '

    FZF_DEFAULT_COMMAND="nmcli $opts --fields '$wifi_fields' device wifi list" \
        fzf --ansi --delimiter='  ' --header-lines=1 --header="$wifi_actions" \
        --bind='ctrl-r:reload(eval "$FZF_DEFAULT_COMMAND")' \
        --bind='alt-r:reload(eval "$FZF_DEFAULT_COMMAND --rescan yes")' \
        --bind="alt-t:execute($cmd wifi toggle)" \
        --bind="alt-d:execute($cmd disconnect wifi)+reload(
            eval '\$FZF_DEFAULT_COMMAND'
        )" \
        --bind='enter:become(
            if [ "$(echo {} | awk -F"[ ][ ]*" "{print \$NF}")" = "*" ]; then
                nmcli connection down {2}
            else
                '"$cmd"' wifi connect {2}
            fi
        )'
}

wifi_toggle() { #{{{2
    nmcli radio wifi "$(
        [ "$(nmcli radio wifi)" = "enabled" ] && echo "off" || echo "on"
    )"
}

disconnect_cmd() { #{{{1
    if [ -z "$1" ]; then
        error "no connection type specified"
    fi

    # shellcheck disable=2086
    nmcli --escape yes --fields "TYPE,UUID" connection show --active |
        tail -n +2 |
        awk -F'[ ][ ]*' '$1 == "'$1'" || "'$1'" == "all" { print $2 }' |
        xargs -I{} nmcli connection down {}

    # nmcli device status |
    #     awk -F'[ ][ ]*' '$2` == "'$1'" && $3 == "connected" { print $1 }' |
    #     xargs -I{} nmcli device disconnect {}
}

main() { #{{{1
    if ! has fzf || ! has nmcli; then
        error "fzf and nmcli are required dependencies"
    fi

    [ -z "$1" ] && help_cmd
    command="$1" && shift

    case "$command" in
        c | co | con | conn | conne | connec | connect | \
            connecti | connectio | connection) connection_cmd ;;
        d | de | dev | devi | devic | device) device_cmd ;;
        w | wi | wif | wifi) wifi_cmd "$@" ;;
        v | vp | vpn) vpn_cmd "$@" ;;
        dis | discon | disconn | disconnect) disconnect_cmd "$@" ;;
        -h | --help | help) help_cmd ;;
        -v | --version | version) printf "%s\n" "$NM_FZF_VERSION" ;;
        *) error "invalid command: \"$command\"" ;;
    esac
}

main "$@"
